
traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000220  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2c  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d2  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000503  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a9  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000024cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  7a:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:
 */ 
#include "LCD.h"

void LCD_command(unsigned char cmnd)
{
	LCD_DATA_PORT = cmnd; // Send the command to the data port
  82:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL_PORT &= ~(1 << RS_PIN); // RS = 0 for command
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT &= ~(1 << RW_PIN); // RW = 0 for write
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT |= (1 << E_PIN); // Enable high
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	84 60       	ori	r24, 0x04	; 4
  94:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_command+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_command+0x1e>
  a0:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL_PORT &= ~(1 << E_PIN); // Enable low
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_command+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_command+0x30>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <LCD_data>:
	_delay_ms(1);
}

void LCD_data(unsigned char data)
{
	LCD_DATA_PORT = data; // Send the data to the data port
  b6:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL_PORT |= (1 << RS_PIN); // RS = 1 for data
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT &= ~(1 << RW_PIN); // RW = 0 for write
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT |= (1 << E_PIN); // Enable high
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_data+0x18>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_data+0x1e>
  d4:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL_PORT &= ~(1 << E_PIN); // Enable low
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_data+0x2a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_data+0x30>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_init>:
}

void LCD_init()
{
	// Set data and control ports as outputs
	DDRC = 0xFF; // Data port
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN); // Control port
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	8a bb       	out	0x1a, r24	; 26
  f4:	87 e8       	ldi	r24, 0x87	; 135
  f6:	93 e1       	ldi	r25, 0x13	; 19
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_init+0xe>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_init+0x14>
  fe:	00 00       	nop
	_delay_ms(20); // LCD Power ON delay
	LCD_command(0x38); // 2 lines, 5x7 matrix
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x0E); // Display on, cursor on
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x01); // Clear display
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 112:	83 ef       	ldi	r24, 0xF3	; 243
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_init+0x2c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_init+0x32>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <LCD_display_string>:
	_delay_ms(2);
}

void LCD_display_string(const char *str)
{
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	8c 01       	movw	r16, r24
	for (int i = 0; str[i] != '\0'; i++)
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
 12e:	09 c0       	rjmp	.+18     	; 0x142 <LCD_display_string+0x22>
	{
		LCD_data(str[i]);//A--> N--> A--> S--> \0 BREAK
 130:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_data>
 134:	87 ea       	ldi	r24, 0xA7	; 167
 136:	91 e6       	ldi	r25, 0x61	; 97
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_display_string+0x18>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_display_string+0x1e>
 13e:	00 00       	nop
	_delay_ms(2);
}

void LCD_display_string(const char *str)
{
	for (int i = 0; str[i] != '\0'; i++)
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	80 81       	ld	r24, Z
 14a:	81 11       	cpse	r24, r1
 14c:	f1 cf       	rjmp	.-30     	; 0x130 <LCD_display_string+0x10>
	{
		LCD_data(str[i]);//A--> N--> A--> S--> \0 BREAK
		_delay_ms(100);
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <display_number>:
#define YELLOW_LED PA6
#define RED_LED    PA5

// ---------- 7-Segment Display ----------
void display_number(uint8_t num) {
	uint8_t tens = num / 10;
 158:	ed ec       	ldi	r30, 0xCD	; 205
 15a:	8e 9f       	mul	r24, r30
 15c:	e1 2d       	mov	r30, r1
 15e:	11 24       	eor	r1, r1
 160:	e6 95       	lsr	r30
 162:	e6 95       	lsr	r30
 164:	e6 95       	lsr	r30
	uint8_t ones = num % 10;
 166:	2e 2f       	mov	r18, r30
 168:	22 0f       	add	r18, r18
 16a:	92 2f       	mov	r25, r18
 16c:	99 0f       	add	r25, r25
 16e:	99 0f       	add	r25, r25
 170:	92 0f       	add	r25, r18
 172:	a8 2f       	mov	r26, r24
 174:	a9 1b       	sub	r26, r25

	PORTB = seg_code[ones]; // Ones digit
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	a0 5a       	subi	r26, 0xA0	; 160
 17a:	bf 4f       	sbci	r27, 0xFF	; 255
 17c:	8c 91       	ld	r24, X
 17e:	88 bb       	out	0x18, r24	; 24
	PORTD = seg_code[tens]; // Tens digit
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e0 5a       	subi	r30, 0xA0	; 160
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	82 bb       	out	0x12, r24	; 18
 18a:	08 95       	ret

0000018c <traffic_light>:
}

// ---------- Traffic Light Function ----------
void traffic_light(uint8_t seconds, uint8_t led_pin, const char *lcd_msg) {
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	c8 2f       	mov	r28, r24
 194:	8a 01       	movw	r16, r20
	// Turn off all LEDs
	PORTA &= ~((1 << GREEN_LED) | (1 << YELLOW_LED) | (1 << RED_LED));
 196:	8b b3       	in	r24, 0x1b	; 27
 198:	8f 71       	andi	r24, 0x1F	; 31
 19a:	8b bb       	out	0x1b, r24	; 27
	
	
	// Turn on the selected LED
	PORTA |= (1 << led_pin);
 19c:	2b b3       	in	r18, 0x1b	; 27
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <traffic_light+0x1c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <traffic_light+0x18>
 1ac:	82 2b       	or	r24, r18
 1ae:	8b bb       	out	0x1b, r24	; 27

	
	
	// LCD message
	LCD_command(0x01); // Clear display
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_display_string(lcd_msg);
 1b6:	c8 01       	movw	r24, r16
 1b8:	0e 94 90 00 	call	0x120	; 0x120 <LCD_display_string>
	

	// Countdown
	for (int8_t i = seconds; i >= 0; i--) {
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <traffic_light+0x4c>
		display_number(i);
 1be:	8c 2f       	mov	r24, r28
 1c0:	0e 94 ac 00 	call	0x158	; 0x158 <display_number>
 1c4:	2f e3       	ldi	r18, 0x3F	; 63
 1c6:	8d e0       	ldi	r24, 0x0D	; 13
 1c8:	93 e0       	ldi	r25, 0x03	; 3
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <traffic_light+0x3e>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <traffic_light+0x48>
 1d4:	00 00       	nop
	LCD_command(0x01); // Clear display
	LCD_display_string(lcd_msg);
	

	// Countdown
	for (int8_t i = seconds; i >= 0; i--) {
 1d6:	c1 50       	subi	r28, 0x01	; 1
 1d8:	cc 23       	and	r28, r28
 1da:	8c f7       	brge	.-30     	; 0x1be <traffic_light+0x32>
		display_number(i);
		_delay_ms(1000);
	}
}
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <main>:

int main(void) {
	// ---------- Port Directions ----------
	DDRA |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN) |
 1e4:	8a b3       	in	r24, 0x1a	; 26
 1e6:	87 6e       	ori	r24, 0xE7	; 231
 1e8:	8a bb       	out	0x1a, r24	; 26
	(1 << GREEN_LED) | (1 << YELLOW_LED) | (1 << RED_LED);
	DDRC = 0xFF; // LCD data
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xFF; // 7-seg ones digit
 1ee:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF; // 7-seg tens digit
 1f0:	81 bb       	out	0x11, r24	; 17

	// ---------- LCD Init ----------
	LCD_init();
 1f2:	0e 94 75 00 	call	0xea	; 0xea <LCD_init>

	while (1) {
		 traffic_light(30, RED_LED, "      STOP");      // Red ? STOP
 1f6:	4a e6       	ldi	r20, 0x6A	; 106
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	65 e0       	ldi	r22, 0x05	; 5
 1fc:	8e e1       	ldi	r24, 0x1E	; 30
 1fe:	0e 94 c6 00 	call	0x18c	; 0x18c <traffic_light>
		traffic_light(10, YELLOW_LED, "     READY");  // Yellow ? READY
 202:	45 e7       	ldi	r20, 0x75	; 117
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	66 e0       	ldi	r22, 0x06	; 6
 208:	8a e0       	ldi	r24, 0x0A	; 10
 20a:	0e 94 c6 00 	call	0x18c	; 0x18c <traffic_light>
		
		traffic_light(30, GREEN_LED, "       GO");  //GRENN-> GO
 20e:	40 e8       	ldi	r20, 0x80	; 128
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	67 e0       	ldi	r22, 0x07	; 7
 214:	8e e1       	ldi	r24, 0x1E	; 30
 216:	0e 94 c6 00 	call	0x18c	; 0x18c <traffic_light>
 21a:	ed cf       	rjmp	.-38     	; 0x1f6 <main+0x12>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
